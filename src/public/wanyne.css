/* Pretendard Variable https://github.com/orioncactus/pretendard */
@import url('https://cdn.jsdelivr.net/gh/orioncactus/pretendard@v1.3.6/dist/web/variable/pretendardvariable-dynamic-subset.css');

/* Roboto Mono */
@import url('https://fonts.googleapis.com/css2?family=Roboto+Mono:ital,wght@0,400;0,500;0,700;1,400;1,500;1,700&display=swap');

/*

  Base styles

*/

:root {
  --yellow-l: rgb(255, 187, 74);
  --yellow: rgb(255, 187, 0);
  --yellow-d: rgb(228, 167, 0);

  --orange-l: rgb(255, 169, 50);
  --orange: rgb(255, 149, 0);
  --orange-d: rgb(255, 149, 0);

  --red-l: rgb(253, 93, 84);
  --red: rgb(255, 59, 48);
  --red-d: rgb(209, 39, 30);

  --magenta-l: rgb(255, 85, 116);
  --magenta: rgb(255, 46, 85);
  --magenta-d: rgb(255, 46, 85);

  --purple-l: rgb(188, 115, 224);
  --purple: rgb(175, 82, 222);
  --purple-d: rgb(143, 57, 185);

  --blue-l: rgb(37, 142, 255);
  --blue: rgb(0, 122, 255);
  --blue-d: rgb(0, 95, 196);

  --cyan-l: rgb(80, 188, 238);
  --cyan: rgb(50, 173, 230);
  --cyan-d: rgb(25, 153, 212);

  --green-l: rgb(92, 219, 124);
  --green: rgb(52, 199, 89);
  --green-d: rgb(40, 179, 74);

  --t255: rgb(255, 255, 255);
  --t245: rgb(245, 245, 245);
  --t230: rgb(230, 230, 230);
  --t210: rgb(210, 210, 210);
  --t180: rgb(180, 180, 180);
  --t128: rgb(128, 128, 128);
  --t80: rgb(80, 80, 80);
  --t60: rgb(60, 60, 60);
  --t45: rgb(45, 45, 45);
  --t30: rgb(30, 30, 30);
  --t20: rgb(20, 20, 20);
  --t0: rgb(0, 0, 0);

  --bg: rgb(245, 245, 245);
  --bgt: rgba(245, 245, 245, 0.25);
  --fg: rgb(0, 0, 0);
  --fgm: rgb(128, 128, 128);

  --th: rgb(210, 176, 221);
  --th-tl: rgba(210, 176, 221, 0.5);

  --input-bg: var(--t230);
  --input-fg: var(--fg);
  --input-ph: var(--t128);
  --input-ol: var(--fg);

  --button-bg: var(--t230);
  --button-fg: var(--fg);
  --button-ol: var(--fg);
  --button-bg-hover: var(--fg);
  --button-fg-hover: var(--bg);
  --button-bg-disabled: var(--t180);
  --button-fg-disabled: var(--t80);
  --button-ol-disabled: var(--t80);

  --scrollbar-bg: var(--t210);
  --scrollbar-fg: var(--t128);
  --scrollbar-size: 0.5rem;
  --scrollbar-radius: 1rem;

  --selection-bg: var(--fg);
  --selection-fg: var(--bg);

  --sidebar-bg: var(--t0);
  --sidebar-bg-label-selected: var(--t45);
  --sidebar-bg-label-hover: var(--t60);
  --sidebar-fg: var(--t245);
  --sidebar-fg-label: var(--t180);
  --sidebar-fg-hr: var(--t80);
  --sidebar-scrollbar-bg: var(--t45);
  --sidebar-scrollbar-fg: var(--t80);

  --sans-serif: 'Pretendard Variable', 'Pretendard JP Variable',
    'Apple Color Emoji', 'Segoe UI Emoji', 'Noto Color Emoji', 'Android Emoji',
    'Malgun Gothic', 'Dotum', sans-serif;
  --serif: 'Times New Roman', 'Shippori Mincho', 'ChosunSm', 'Batang',
    'Apple Color Emoji', 'Segoe UI Emoji', 'Noto Color Emoji', 'Android Emoji',
    'Malgun Gothic', serif;
  --monospace: 'SF Mono', 'Roboto Mono', 'Consolas', 'Pretendard Variable',
    'Pretendard JP Variable', 'Apple Color Emoji', 'Segoe UI Emoji',
    'Noto Color Emoji', 'Android Emoji', 'Malgun Gothic', 'Malgun Gothic',
    'Dotum', sans-serif;
}
html {
  font-size: 15px;
}
body {
  font-family: var(--sans-serif);
  font-weight: normal;
  margin: 0;
  padding: 0;
  -webkit-text-size-adjust: none;
  text-size-adjust: none;
  scrollbar-width: 0.5rem;
  scrollbar-color: var(--scrollbar-fg) var(--scrollbar-bg);
  min-height: 100vh;
  min-height: calc((var(--vh, 1vh) * 100));
  overflow-y: auto;
  overflow-x: hidden;
  background: var(--bg);
  color: var(--fg);
  -webkit-print-color-adjust: exact !important;
  print-color-adjust: exact !important;
}
* {
  margin: 0;
  padding: 0;
  border: none;
  outline: none;
  border-spacing: 0;
  color: var(--fg);
  line-height: 100%;
}
@media print {
  @page {
    margin: 15mm 15mm 20mm 15mm;
  }
  :root {
    --bg: white;
    --fg: black;
  }
}

/*

  Default element styles
  
*/

/* Text object */
a {
  text-decoration: none;
}
h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: 500;
}
h1 {
  font-size: 3rem;
}
h2 {
  font-size: 2.5rem;
}
h3 {
  font-size: 2rem;
}
h4 {
  font-size: 1.75rem;
}
h5 {
  font-size: 1.5rem;
}
h6 {
  font-size: 1.25rem;
}
hr {
  width: 100%;
  height: 1px;
  background: var(--t210);
  border: none;
}
/* SVG */
svg {
  fill: var(--fg);
  stroke: transparent;
  stroke-width: 0.1rem;
  overflow: visible;
}
svg * {
  fill: var(--fg);
  stroke: transparent;
}
text {
  font-family: var(--sans-serif);
}
/* Scrollbar */
::-webkit-scrollbar {
  position: fixed;
  width: var(--scrollbar-size);
  height: var(--scrollbar-size);
}
::-webkit-scrollbar-track {
  background: var(--scrollbar-bg);
}
::-webkit-scrollbar-thumb,
::-webkit-scrollbar-thumb:hover {
  background: var(--scrollbar-fg);
  border-radius: var(--scrollbar-radius);
}
/* Custom element style attribute */
[layer] {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
[noselect] {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}
.none {
  display: none !important;
}
.opa0 {
  opacity: 0 !important;
}
.layer {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

/*

  Keyframes
  
*/
@keyframes rainbow {
  0% {
    background-position: 0% 50%;
  }
  100% {
    background-position: 100% 50%;
  }
}
[color='rainbow'],
.rainbow {
  background: linear-gradient(
    to right,
    rgba(255, 0, 0, 1),
    rgba(255, 154, 0, 1),
    rgba(208, 222, 33, 1),
    rgba(79, 220, 74, 1),
    rgba(63, 218, 216, 1),
    rgba(47, 201, 226, 1),
    rgba(28, 127, 238, 1),
    rgba(95, 21, 242, 1),
    rgba(186, 12, 248, 1),
    rgba(251, 7, 217, 1),
    rgba(255, 0, 0, 1),
    rgba(255, 154, 0, 1),
    rgba(208, 222, 33, 1),
    rgba(79, 220, 74, 1),
    rgba(63, 218, 216, 1),
    rgba(47, 201, 226, 1),
    rgba(28, 127, 238, 1),
    rgba(95, 21, 242, 1),
    rgba(186, 12, 248, 1),
    rgba(251, 7, 217, 1),
    rgba(255, 0, 0, 1)
  );
  background-size: 200% 100%;
  color: white;
  animation-name: rainbow;
  animation-duration: 1s;
  animation-timing-function: linear;
  animation-direction: normal;
  animation-iteration-count: infinite;
}
.rainbow.back {
  animation-direction: reverse;
}
@keyframes shake {
  0% {
    transform: translate(0.125rem, 0.125rem) rotate(0deg);
  }
  10% {
    transform: translate(-0.125rem, -0.25rem) rotate(-1deg);
  }
  20% {
    transform: translate(-0.375rem, 0px) rotate(1deg);
  }
  30% {
    transform: translate(0.375rem, 0.25rem) rotate(0deg);
  }
  40% {
    transform: translate(0.125rem, -0.125rem) rotate(1deg);
  }
  50% {
    transform: translate(-0.125rem, 0.25rem) rotate(-1deg);
  }
  60% {
    transform: translate(-0.375rem, 0.125rem) rotate(0deg);
  }
  70% {
    transform: translate(0.375rem, 0.125rem) rotate(-1deg);
  }
  80% {
    transform: translate(-0.125rem, -0.125rem) rotate(1deg);
  }
  90% {
    transform: translate(0.125rem, 0.25rem) rotate(0deg);
  }
  100% {
    transform: translate(0.125rem, -0.25rem) rotate(-1deg);
  }
}

/*

  Input, Textarea, Button
  
*/

[color='black'] {
  --button-bg: var(--t0);
  --button-fg: var(--t245);
  --button-bg-hover: var(--t30);
  --button-fg-hover: var(--t245);
}
[color='black'][outline] {
  --button-bg: var(--t30);
  --button-fg: var(--t245);
  --button-ol: var(--t0);
  --button-bg-hover: var(--t0);
}
[color='yellow'] {
  --button-bg: var(--yellow);
  --button-fg: var(--t255);
  --button-bg-hover: var(--yellow-l);
  --button-fg-hover: var(--t255);
}
[color='yellow'][outline] {
  --button-bg: var(--t230);
  --button-fg: var(--yellow);
  --button-ol: var(--yellow);
  --button-bg-hover: var(--yellow);
}
[color='orange'] {
  --button-bg: var(--orange);
  --button-fg: var(--t255);
  --button-bg-hover: var(--orange-l);
  --button-fg-hover: var(--t255);
}
[color='orange'][outline] {
  --button-bg: var(--t230);
  --button-fg: var(--orange);
  --button-ol: var(--orange);
  --button-bg-hover: var(--orange);
}
[color='red'] {
  --button-bg: var(--red);
  --button-fg: var(--t255);
  --button-bg-hover: var(--red-l);
  --button-fg-hover: var(--t255);
}
[color='red'][outline] {
  --button-bg: var(--t230);
  --button-fg: var(--red);
  --button-ol: var(--red);
  --button-bg-hover: var(--red);
}
[color='magenta'] {
  --button-bg: var(--magenta);
  --button-fg: var(--t255);
  --button-bg-hover: var(--magenta-l);
  --button-fg-hover: var(--t255);
}
[color='magenta'][outline] {
  --button-bg: var(--t230);
  --button-fg: var(--magenta);
  --button-ol: var(--magenta);
  --button-bg-hover: var(--magenta);
}
[color='purple'] {
  --button-bg: var(--purple);
  --button-fg: var(--t255);
  --button-bg-hover: var(--purple-l);
  --button-fg-hover: var(--t255);
}
[color='purple'][outline] {
  --button-bg: var(--t230);
  --button-fg: var(--purple);
  --button-ol: var(--purple);
  --button-bg-hover: var(--purple);
}
[color='blue'] {
  --button-bg: var(--blue);
  --button-fg: var(--t255);
  --button-bg-hover: var(--blue-l);
  --button-fg-hover: var(--t255);
}
[color='blue'][outline] {
  --button-bg: var(--t230);
  --button-fg: var(--blue);
  --button-ol: var(--blue);
  --button-bg-hover: var(--blue);
}
[color='cyan'] {
  --button-bg: var(--cyan);
  --button-fg: var(--t255);
  --button-bg-hover: var(--cyan-l);
  --button-fg-hover: var(--t255);
}
[color='cyan'][outline] {
  --button-bg: var(--t230);
  --button-fg: var(--cyan);
  --button-ol: var(--cyan);
  --button-bg-hover: var(--cyan);
}
[color='green'] {
  --button-bg: var(--green);
  --button-fg: var(--t255);
  --button-bg-hover: var(--green-l);
  --button-fg-hover: var(--t255);
}
[color='green'][outline] {
  --button-bg: var(--t230);
  --button-fg: var(--green);
  --button-ol: var(--green);
  --button-bg-hover: var(--green);
}

button {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  height: 4rem;
  padding: 0 2.5rem;
  border-radius: 1rem;
  background: var(--button-bg);
  font-family: var(--sans-serif);
  font-size: 1.25rem;
  font-weight: 500;
  color: var(--button-fg);
  transition: transform 0.1s ease-out, background 0.05s ease-out,
    color 0.05s ease-out;
  cursor: pointer;
  border: none;
  outline: none;
}
button[medium] {
  height: 3rem;
  padding: 0 1.75rem;
  border-radius: 0.75rem;
  font-size: 1.25rem;
}
button[small] {
  height: 2rem;
  padding: 0 1rem;
  border-radius: 0.5rem;
  font-size: 1rem;
}
button:hover,
button[selected] {
  background: var(--button-bg-hover);
  color: var(--button-fg-hover);
}
button:active {
  transform: scale(0.975);
}
button:focus {
  outline: none;
}
button:disabled {
  background: var(--button-bg-disabled);
  color: var(--button-fg-disabled);
  cursor: not-allowed;
}
button[outline] {
  box-shadow: inset 0 0 0 0.1rem var(--button-ol) !important;
}
button:disabled[outline] {
  box-shadow: inset 0 0 0 0.1rem var(--button-ol-disabled) !important;
}
button[hoveroutline]:hover {
  box-shadow: inset 0 0 0 0.1rem var(--button-ol) !important;
}
button:disabled[hoveroutline]:hover {
  box-shadow: inset 0 0 0 0.1rem var(--button-ol-disabled) !important;
}
button[magnify]:hover {
  background: var(--button-bg);
  color: var(--button-fg);
  transform: scale(1.05);
}
button[round] {
  border-radius: 100rem !important;
}
button[ellipse] {
  border-radius: 100% 100% !important;
}
button svg {
  fill: var(--button-fg);
  stroke: var(--button-fg);
  overflow: visible;
}
button svg * {
  fill: var(--button-fg);
  stroke: var(--button-fg);
}

/* text-like inputs (text, number, password...) */
/* [pug]
.input.text
  input(type="text" placeholder="placholder") 
  label label
  .border
*/
[contenteditable='true']:empty:before {
  content: attr(placeholder);
  color: var(--input-ph);
}
input,
textarea {
  -webkit-appearance: none;
  appearance: none;
}
input:focus,
textarea:focus {
  outline: none;
}
input:disabled,
textarea:disabled {
  cursor: not-allowed !important;
}
input:disabled[color],
textarea:disabled[color] {
  pointer-events: none;
  --input-bg: var(--bg-h);
  --input-bg-230: var(--bg);
  --input-fg: var(--fg);
  --input-ph: var(--fg-l);
  --input-ol: var(--fg);

  --button-bg: var(--bg-h);
  --button-bg-hover: var(--bg);
  --button-fg: var(--fg);
  --button-ph: var(--fg-l);
  --button-ol: var(--fg);
}
input:autofill,
input:autofill:hover,
input:autofill:focus,
textarea:autofill,
textarea:autofill:hover,
textarea:autofill:focus,
select:autofill,
select:autofill:hover,
select:autofill:focus,
input:-webkit-autofill,
input:-webkit-autofill:hover,
input:-webkit-autofill:focus,
textarea:-webkit-autofill,
textarea:-webkit-autofill:hover,
textarea:-webkit-autofill:focus,
select:-webkit-autofill,
select:-webkit-autofill:hover,
select:-webkit-autofill:focus {
  box-shadow: 0 0 0 1000px var(--input-bg) inset;
  font-family: var(--sans-serif);
  -webkit-text-fill-color: var(--input-fg);
}
.input.text {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  position: relative;
  width: 100%;
  height: 4rem;
}
.textarea {
  position: relative;
  width: 100%;
  overflow: hidden;
}
.input.text > input,
.input.text > input:-webkit-autofill,
.input.text > input:-webkit-autofill:hover,
.input.text > input:-webkit-autofill:focus,
.textarea > textarea,
.textarea > textarea:-webkit-autofill,
.textarea > textarea:-webkit-autofill:hover,
.textarea > textarea:-webkit-autofill:focus {
  width: calc(100% - 2rem);
  height: 100%;
  padding: 0 1rem 0 1rem;
  margin: 0;
  border-radius: 1rem;
  cursor: text;
  font-family: var(--sans-serif);
  font-size: 1.25rem !important;
  font-weight: 500 !important;
  background: var(--input-bg);
  box-shadow: 0 0 0 100rem var(--input-bg) inset !important;
  -webkit-text-fill-color: var(--input-fg) !important;
  word-break: break-all;
}
.textarea > textarea {
  vertical-align: bottom;
  max-width: calc(100% - 2rem);
  min-width: calc(100% - 2rem);
  height: 100%;
  min-height: 6rem;
  padding: 1rem 1rem 1rem 1rem;
}
.input.text[label='inner'] > input,
.input.text[label='inner'] > input:hover,
.input.text[label='inner'] > input:focus {
  height: calc(100% - 1rem);
  padding: 0.875rem 1rem 0 1rem;
}
.textarea[label='inner'] > textarea,
.textarea[label='inner'] > textarea:hover,
.textarea[label='inner'] > textarea:focus {
  min-height: 5rem;
  padding: 2rem 1rem 1rem 1rem;
}
.input.text > input:placeholder-shown,
.textarea > textarea:placeholder-shown {
  -webkit-text-fill-color: var(--input-ph) !important;
}
.input.text[label='inner'] > input:placeholder-shown {
  height: 100%;
  padding: 0 1rem 0 1rem;
}
.textarea[label='inner'] > textarea:placeholder-shown {
  min-height: 6rem;
  padding: 1rem 1rem 1rem 1rem;
}
.input.text > input::placeholder,
.input.text > input::-webkit-input-placeholder,
.textarea > textarea::placeholder,
.textarea > textarea::-webkit-input-placeholder {
  color: var(--input-ph);
}
.input.text > label,
.textarea > label {
  display: none;
  z-index: 30000;
}
.input.text[label='inner'] > label,
.textarea[label='inner'] > label {
  display: block;
  position: absolute;
  top: 0.875rem;
  left: 1rem;
  font-family: var(--sans-serif);
  font-size: 0.875rem;
  font-weight: 500;
  transition: opacity 0.2s ease-out, top 0.2s ease-out;
  pointer-events: none;
  color: var(--input-fg);
}
.input.text[label='inner'] > input:placeholder-shown ~ label,
.textarea[label='inner'] > textarea:placeholder-shown ~ label {
  opacity: 0;
  top: 1rem;
}
.input.text[label='top'] > label,
.textarea[label='top'] > label {
  display: block;
  position: absolute;
  top: -0.675rem;
  left: 0.5rem;
  font-family: var(--sans-serif);
  font-size: 0.875rem;
  font-weight: 500;
  transition: opacity 0.2s ease-out, top 0.2s ease-out;
  pointer-events: none;
  color: var(--input-fg);
  background: var(--input-bg);
  padding: 0.3rem 0.5rem;
  border-radius: 100rem;
}
.input.text[label='top'] > input:placeholder-shown ~ label,
.textarea[label='top'] > textarea:placeholder-shown ~ label {
  opacity: 0;
  top: 0rem;
}
.input.text > .border,
.textarea > .border {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 1rem;
  transition: box-shadow 0.1s ease-out, padding-bottom 0.1s ease-out,
    top 0.1s ease-out;
  pointer-events: none;
  z-index: 20000;
  padding-bottom: 0;
  padding-top: 0;
}
.input.text > input:focus ~ .border,
.textarea > textarea:focus ~ .border {
  transition: box-shadow 0.2s ease-out, padding-bottom 0.1s ease-out,
    top 0.1s ease-out;
  box-shadow: inset 0 0 0 0.1em var(--input-ol) !important;
}
.input.text > input[type='search'] {
  width: 100%;
  height: 100%;
}
.input.text > button,
.input.text > a {
  position: absolute;
  right: 0.5rem;
}
.input.text > .buttons {
  position: absolute;
  top: 0;
  width: calc(100% - 0.5rem);
  height: 100%;
  padding-right: 0.5rem;
  pointer-events: none;
  display: flex;
  justify-content: flex-end;
  align-items: center;
}
.input.text > .buttons > button,
.input.text > .buttons > a {
  margin-left: 0.5rem;
  pointer-events: all;
}
.textarea[medium] > textarea,
.textarea[medium] > textarea:-webkit-autofill,
.textarea[medium] > textarea:-webkit-autofill:hover,
.textarea[medium] > textarea:-webkit-autofill:focus {
  border-radius: 0.75rem;
}
.input.text[medium] {
  height: 3rem;
}
.input.text[medium] > input {
  height: 100%;
  padding: 0 1rem 0 1rem;
  border-radius: 0.75rem;
}
.input.text[medium] > .border {
  border-radius: 0.75rem;
}
.input.text[small] {
  height: 2rem;
}
.input.text[small] > input {
  font-size: 1rem !important;
  height: 100%;
  padding: 0 1rem 0 1rem;
  border-radius: 0.75rem;
}
.input.text[small] > .border {
  border-radius: 0.75rem;
}
.layer.input.text {
  position: absolute;
}
.input.text > .autocomplete {
  width: calc(100% - 2rem);
  position: absolute;
  background: var(--input-bg);
  z-index: 10000;
  pointer-events: none;
  opacity: 0;
  transition: opacity 0.1s ease-out, top 0.1s ease-out, bottom 0.1s ease-out;
  max-height: 10em;
  overflow-y: auto;
}
.input.text > .autocomplete.event {
  pointer-events: all;
}
.input.text > .autocomplete.drop {
  pointer-events: all;
  opacity: 1;
}
.input.text > .autocomplete > label {
  font-family: var(--sans-serif);
  font-size: 1rem;
  font-weight: 500;
  color: var(--input-ph);
  display: block;
  line-height: 2rem;
  height: 2rem;
  overflow-x: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}
.input.text > .autocomplete > label:hover,
.input.text > .autocomplete > label[selected='true'] {
  color: var(--input-fg);
}
.input.text > .autocomplete > label.hide {
  display: none;
}
.input.text > .autocomplete.bottom {
  top: 1.5rem;
  border-top: solid 0.125em var(--input-ph);
  border-bottom-left-radius: 1rem;
  border-bottom-right-radius: 1rem;
  padding: 0 1rem 0.5rem 1rem;
}
.input.text > .autocomplete.bottom.drop {
  top: 3.5rem;
}
.input.text > .autocomplete.top {
  bottom: 1.5rem;
  border-bottom: solid 1.5px var(--input-ph);
  border-top-left-radius: 1rem;
  border-top-right-radius: 1rem;
  padding: 0.5rem 1rem 0 1rem;
}
.input.text > .autocomplete.top.drop {
  bottom: 3.5rem;
}
.input.text.h45 > .autocomplete.bottom {
  top: 0.5rem;
  border-top: solid 0.125em var(--input-ph);
  border-bottom-left-radius: 1rem;
  border-bottom-right-radius: 1rem;
  padding: 0 1rem 0.5rem 1rem;
}
.input.text.h45 > .autocomplete.bottom.drop {
  top: 2.5rem;
}
.input.text.h45 > .autocomplete.top {
  bottom: 0.5rem;
  border-bottom: solid 1.5px var(--input-ph);
  border-top-left-radius: 1rem;
  border-top-right-radius: 1rem;
  padding: 0.5rem 1rem 0 1rem;
}
.input.text.h45 > .autocomplete.top.drop {
  bottom: 2.5rem;
}

.input.text > input[type='search'] {
  width: 100%;
  height: 100%;
}
.input.text.h45 > input {
  height: 100%;
  padding: 0 1rem 0 1rem;
}
.input.text.h45 {
  height: 3rem;
}
.layer.input.text {
  position: absolute;
}

/* checkbox-like inputs (single) (checkbox, radio...) */
/* [pug]
.input.checkbox
  .checkwrapper
    input(type="checkbox")
    label label
    .checkbtn
*/
.input.checkbox {
  display: inline-flex;
  min-height: 1.5rem;
  align-items: center;
  justify-content: flex-start;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  position: relative;
}
.input.checkbox[button='right'] {
  justify-content: flex-end;
}
.input.checkbox label {
  font-family: var(--sans-serif);
  font-size: 1.25rem;
  font-weight: 500;
  display: block;
  width: auto;
  min-height: 1.5rem;
  line-height: 1.5rem;
  pointer-events: none;
  text-align: left;
  margin-left: 2rem;
  color: var(--input-ph);
  transition: color 0.1s ease-out;
}
.input.checkbox input:checked ~ label {
  color: var(--input-fg);
}
.input.checkbox[button='right'] label {
  text-align: right;
  margin-left: unset;
  margin-right: 2rem;
}
.input.checkbox input {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  cursor: pointer;
  background-color: unset;
  opacity: 0;
}
.input.checkbox .checkbtn {
  position: absolute;
  top: 0;
  left: 0;
  width: 1.5rem;
  height: 1.5rem;
  box-shadow: inset 0 0 0 0 var(--input-ol);
  transition: box-shadow 0.1s ease-out;
  pointer-events: none;
  border-radius: 100%;
  background: var(--input-bg);
}
.input.checkbox[button='right'] .checkbtn {
  left: unset;
  right: 0;
}
.input.checkbox:hover input ~ .checkbtn {
  transition: box-shadow 0.1s ease-out;
  box-shadow: inset 0 0 0 0.1rem var(--input-ol);
}
.input.checkbox input:checked ~ .checkbtn,
.input.checkbox:hover input:checked ~ .checkbtn {
  transition: box-shadow 0.2s ease-out;
  box-shadow: inset 0 0 0 1.5rem var(--input-ol);
}
.input.checkbox input:disabled ~ label {
  color: var(--input-ph);
}
.input.checkbox:hover input:disabled ~ .checkbtn {
  transition: box-shadow 0.1s ease-out;
  box-shadow: inset 0 0 0 0 var(--input-ol);
}
.input.checkbox:hover input:disabled:checked ~ .checkbtn {
  transition: box-shadow 0.2s ease-out;
  box-shadow: inset 0 0 0 1.5rem var(--input-ol);
}
/* radio input (multiple set) */
/* [pug]
.input.radio
  label radio
  .options
    .input.checkbox.left
      .checkwrapper
      input(type="radio" name="radio")
        label label1
        .checkbtn
    .input.checkbox.left
      .checkwrapper
      input(type="radio" name="radio")
        label label2
        .checkbtn
*/
.input.radio {
  position: relative;
  width: 100%;
  min-height: 6rem;
  border-radius: 1rem;
  background: var(--input-bg);
  display: flex;
  justify-content: flex-end;
}
.input.radio .input.checkbox {
  display: flex;
  --input-bg: var(--input-bg-230);
  --button-bg: var(--button-bg-230);
}
.input.radio .input.checkbox:not([color]) {
  --button-bg: var(--input-fg);
}
.input.radio .checkbtn {
  --input-bg: var(--bg);
}
.input.radio > label {
  position: absolute;
  top: 0.5rem;
  left: 1rem;
  font-size: 12pt;
  font-weight: 500;
  transition: opacity 0.2s ease-out, top 0.2s ease-out;
  line-height: 2rem;
}
.input.radio.multiline label {
  top: 0.5rem;
}
.input.radio .options {
  width: calc(50% - 1rem);
  margin-right: 1rem;
  padding-top: 1rem;
  padding-bottom: 0.5rem;
}
.input.radio .options .input {
  margin-bottom: 0.5rem;
}
/* select input */
/* [pug]
.input.select
  label select
  select(name="location")
    option(value="" disabled selected) select option
    option(value="option1") option1
    option(value="option2") option2
  .border
*/
.input.select {
  position: relative;
  width: 100%;
  height: 4rem;
  border-radius: 1rem;
  background: var(--input-bg);
  display: flex;
  align-items: center;
  justify-content: space-between;
}
.input.select.multiline {
  height: 6rem;
  display: block;
}
.input.select select {
  position: absolute;
  width: calc(50% - 1rem);
  height: 2rem;
  right: 1rem;
  border-radius: 5px;
  background: var(--input-bg-230);
  color: var(--input-fg);
  border: none;
  padding-right: 5px;
  padding-left: 5px;
  font-family: var(--sans-serif);
  font-size: 10pt;
  font-weight: 500;
  cursor: pointer;
  outline: none;
}
.input.select.nolabel select {
  width: calc(100% - 2rem);
  bottom: 1rem;
}
.input.select.multiline select {
  width: calc(100% - 2rem);
  bottom: 1rem;
}
.input.select select option,
.input.select select optgroup {
  font-family: var(--sans-serif);
  font-size: 10pt;
  font-weight: 500;
  background: var(--input-bg);
  color: var(--input-fg);
}
.input.select label {
  position: absolute;
  font-family: var(--sans-serif);
  font-size: 12pt;
  font-weight: 500;
  transition: opacity 0.2s ease-out, top 0.2s ease-out;
  margin-left: 1rem;
  line-height: 2rem;
}
.input.select.multiline label {
  top: 0.5rem;
}
.input.select .border {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 1rem;
  transition: box-shadow 0.1s ease-out;
  pointer-events: none;
}
.input.select select:focus ~ .border {
  transition: box-shadow 0.2s ease-out;
  box-shadow: inset 0 0 0 1.5px var(--input-fg) !important;
}
/* range input (needs script) */
.input.range {
  position: relative;
  width: 100%;
  min-height: 4rem;
  border-radius: 1rem;
  background: var(--input-bg);
  display: flex;
  align-items: center;
  justify-content: flex-end;
  pointer-events: none;
  overflow-y: hidden;
  overflow-x: hidden;
}
.input.range > label {
  position: absolute;
  top: 1rem;
  left: 0;
  font-family: var(--sans-serif);
  font-size: 12pt;
  font-weight: 500;
  transition: opacity 0.2s ease-out, top 0.2s ease-out;
  margin-left: 1rem;
  line-height: 2rem;
}
.input.range > .number {
  position: absolute;
  top: 1rem;
  right: 0;
  font-family: var(--sans-serif);
  font-size: 12pt;
  font-weight: 500;
  transition: opacity 0.2s ease-out, top 0.2s ease-out;
  margin-right: 1rem;
  line-height: 2rem;
  text-align: right;
}
.input.range > input[type='number'].number {
  pointer-events: all;
  z-index: 10;
  width: 6rem;
  background-color: transparent;
}
.input.range > input[type='number'].number::-webkit-outer-spin-button,
.input.range > input[type='number'].number::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}
.input.range input[type='range'] {
  position: absolute;
  top: 0;
  right: 0;
  width: calc(50% + 1rem);
  height: 100%;
  pointer-events: all;
  opacity: 0;
}
.input.range .slider {
  position: absolute;
  top: 0;
  right: 1rem;
  width: calc(50% - 1rem);
  height: 100%;
  display: flex;
  align-items: center;
}
.input.range .slider .bar {
  width: 100%;
  height: 1.5px;
  background: var(--input-fg);
}
.input.range .slider .button {
  position: absolute;
  width: 0;
  height: 2rem;
  left: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
}
.input.range .slider .button .e {
  position: absolute;
  width: 20px;
  height: 20px;
  box-shadow: inset 0 0 0 1.5px var(--input-fg);
  transition: box-shadow 0.1s ease-out;
  pointer-events: none;
  border-radius: 100px;
  background: var(--input-bg);
}
.input.range input[type='range'].mouse ~ .slider .button .e {
  transition: box-shadow 0.2s ease-out;
  box-shadow: inset 0 0 0 20px var(--input-fg);
}
.input.range .slider .button .number {
  width: 6rem;
  position: absolute;
  font-size: 10pt;
  top: -12.5px;
  text-align: center;
}
.input.range .slider > .number {
  position: absolute;
}
.input.range.multiline {
  height: 6rem;
}
.input.range.multiline > label,
.input.range.multiline > .number {
  top: 0.5rem;
}
.input.range.multiline input[type='range'] {
  position: absolute;
  top: 1rem;
  right: 0;
  width: 100%;
  height: 100%;
  pointer-events: all;
  opacity: 0;
}
.input.range.multiline .slider {
  position: absolute;
  top: 1rem;
  right: 1rem;
  width: calc(100% - 2rem);
  height: 100%;
  display: flex;
  align-items: center;
}
/* file input (needs script) */
.input.file {
  position: relative;
  width: 100%;
  min-height: 4rem;
  border-radius: 1rem;
  background: var(--input-bg);
  display: flex;
  align-items: center;
  justify-content: flex-end;
  overflow: hidden;
  pointer-events: none;
}
.input.file label {
  position: absolute;
  top: 1rem;
  left: 0;
  font-family: var(--sans-serif);
  font-size: 12pt;
  font-weight: 500;
  transition: opacity 0.2s ease-out, top 0.2s ease-out;
  margin-left: 1rem;
  line-height: 2rem;
}
.input.file .files {
  width: calc(50% - 1rem);
  min-height: 2rem;
  right: 1rem;
  margin-top: 1rem;
  margin-bottom: 1rem;
  margin-right: 1rem;
  font-family: var(--sans-serif);
  font-size: 12pt;
  font-weight: 500;
  display: flex;
  align-items: center;
  cursor: pointer;
}
.input.file input[type='file'] {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: all;
  opacity: 0;
}
.input.file .border {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 1rem;
  transition: box-shadow 0.1s ease-out;
  pointer-events: none;
}
.input.file input[type='file']:hover ~ .border {
  transition: box-shadow 0.2s ease-out;
  box-shadow: inset 0 0 0 1.5px var(--input-fg) !important;
}
.input.file.drag .border {
  transition: box-shadow 0.2s ease-out;
  box-shadow: inset 0 0 0 1.5px var(--input-fg) !important;
}
/* textarea */
/* [pug]
.textarea
  textarea(placeholder="placeholder")
  label label
  .border
*/

/*

  Layout classes

*/

.outwrapper {
  position: relative;
  width: calc(100% - 12rem);
  max-width: 75vw;
  padding: 0 2rem 0 2rem;
  margin: 0 auto;
  transition: width 0.2s ease-out, max-width 0.2s ease-out,
    padding 0.2s ease-out;
}
.outwrapper[full] {
  width: calc(100% - 4rem);
  max-width: unset;
}
.outwrapper[wide] {
  max-width: unset;
}
.outwrapper[narrow] {
  max-width: 46rem;
}
.outwrapper[rightwide] {
  width: calc(100% - 4rem);
  max-width: unset;
  display: flex;
  justify-content: flex-start;
}
.outwrapper[rightwide] .inwrapper {
  width: calc(
    (100% - (50% - (50vw - max(12rem, calc(12.5vw - 2rem)) - 2rem))) + 4rem
  );
  margin-left: calc(
    max(
        13rem,
        (
            100% -
              (100% - (50% - (50vw - max(12rem, calc(12.5vw - 2rem)) - 2rem)))
          ) / 2
      ) + 4rem
  );
}
.outwrapper[rightnarrow] {
  max-width: unset;
  display: flex;
  justify-content: flex-start;
}
.outwrapper[rightnarrow] .inwrapper {
  width: calc(
    min(
      46rem,
      100% - (50% - (50vw - max(16rem, calc(12.5vw - 2rem)) - 2rem) + 1rem)
    )
  );
  margin-left: calc(
    max(
      13rem,
      (
          100% -
            min(
              46rem,
              100% - (50% - (50vw - max(16rem, calc(12.5vw - 2rem)) - 2rem))
            )
        ) / 2
    )
  );
}
.outwrapper[right80rem] {
  max-width: unset;
  display: flex;
  justify-content: flex-start;
}
.outwrapper[right80rem] .inwrapper {
  width: calc(
    min(80rem, 100% - (50% - (50vw - max(12rem, calc(12.5vw - 2rem)) - 2rem)))
  );
  margin-left: calc(
    max(
      13rem,
      (
          100% -
            min(
              80rem,
              100% - (50% - (50vw - max(12rem, calc(12.5vw - 2rem)) - 2rem))
            )
        ) / 2
    )
  );
}
.inwrapper {
  position: relative;
  width: 100%;
}
.pwrapper {
  position: relative;
  max-width: 900px;
  margin: 0 auto;
}
@media (max-width: 1500px) {
  .outwrapper {
    max-width: 85vw;
  }
  .outwrapper[wide] {
    max-width: unset;
  }
}
@media (max-width: 900px) {
  .outwrapper {
    width: calc(100% - 4rem);
    max-width: unset;
  }
  .outwrapper[wide],
  .outwrapper[rightwide] {
    width: calc(100% - 4rem);
    max-width: calc(100% - 4rem);
    padding: 0 2rem 0 2rem;
  }
  .outwrapper[rightwide] .inwrapper,
  .outwrapper[rightnarrow] .inwrapper,
  .outwrapper[right80rem] .inwrapper {
    width: 100%;
    margin-left: 0;
  }
}
@media (max-width: 600px) {
  .outwrapper,
  .outwrapper[wide],
  .outwrapper[rightwide] {
    width: calc(100% - 2rem);
    max-width: calc(100% - 2rem);
    padding: 0 1rem 0 1rem;
  }
}

/* Sidebar (use .outwrapper.right) */
aside.sidebar {
  position: fixed;
  top: -120vh;
  top: calc(var(--vh, 1vh) * -120);
  left: 2rem;
  width: calc(max(16rem, calc(12.5vw - 2rem)));
  transition: left 0.2s cubic-bezier(0, 0, 0.3, 1.3),
    width 0.2s cubic-bezier(0, 0, 0.3, 1.3);
  z-index: 3000000;
  border-radius: 2rem;
  background: var(--sidebar-bg);
}
aside.sidebar.hide {
  left: calc(max(16rem, calc(12.5vw - 2rem)) * -1);
}
aside.sidebar > .content {
  width: calc(100% - 1.75rem);
  margin-left: 0.875rem;
  max-height: calc(100vh - 16rem);
  max-height: calc((var(--vh, 1vh) * 100) - 11rem);
  padding: 2rem 0;
  overflow-y: auto;
  overflow-x: hidden;
  scrollbar-width: 0.5rem;
  scrollbar-color: var(--sidebar-scrollbar-fg) var(--sidebar-scrollbar-bg);
}
aside.sidebar.withstars > .content {
  max-height: calc(100vh - 16rem);
  max-height: calc((var(--vh, 1vh) * 100) - 14rem);
  padding: 0;
}
aside.sidebar > .content * {
  color: var(--sidebar-fg);
}
aside.sidebar > .stars {
  height: 2rem;
  width: calc(100% - 2rem);
  padding: 1rem;
  display: flex;
  justify-content: space-between;
}
aside.sidebar > .stars.top {
  padding-bottom: 0.5rem;
}
aside.sidebar > .stars.bottom {
  padding-top: 0.5rem;
}
aside.sidebar > .stars > svg,
aside.sidebar > .stars > svg * {
  fill: none;
  stroke: var(--sidebar-fg);
}
aside.sidebar > button {
  position: absolute;
  width: 2.1rem;
  min-width: unset;
  height: 4rem;
  padding: 0;
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
  border-bottom-right-radius: 100%;
  border-top-right-radius: 100%;
  background: var(--sidebar-bg);
  top: 4rem;
  right: calc(max(16rem, calc(12.5vw - 2rem)) + 2rem);
  transition: right 0.2s cubic-bezier(0, 0, 0.3, 1.3);
  z-index: 1000000;
}
aside.sidebar > button:active {
  transform: none;
}
aside.sidebar > button svg {
  transition: transform 0.2s cubic-bezier(0, 0, 0.3, 1.3);
}
aside.sidebar > button svg,
aside.sidebar > button svg * {
  height: 1.25rem;
  fill: transparent;
  stroke: var(--sidebar-fg);
  stroke-width: 0.125rem;
}
aside.sidebar.open > button svg {
  transform: rotate(180deg);
}
aside.sidebar > .content label {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  font-size: 1.25rem;
  font-weight: 700;
  line-height: 120%;
  cursor: pointer;
  border-radius: 0.5rem;
  padding: 0.5rem 0.5rem;
}
aside.sidebar > .content label,
aside.sidebar > .content label > * {
  color: var(--sidebar-fg-label);
}
aside.sidebar > .content label:last-child {
  margin-bottom: 0;
}
aside.sidebar > .content label[selected] {
  background: var(--sidebar-bg-label-selected);
}
aside.sidebar > .content label:hover {
  background: var(--sidebar-bg-label-hover);
}
aside.sidebar > .content label[selected],
aside.sidebar > .content label[selected] > *,
aside.sidebar > .content label:hover,
aside.sidebar > .content label:hover > * {
  color: var(--sidebar-fg);
}
aside.sidebar > .content label > .icon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 1.25rem;
  height: 1.25rem;
}
aside.sidebar > .content label > .icon svg {
  width: 1.25rem;
}
aside.sidebar > .content label > .icon svg,
aside.sidebar > .content label > .icon svg * {
  fill: transparent;
  stroke: var(--sidebar-fg-label);
  stroke-width: 0.175rem;
}
aside.sidebar > .content label[selected] > .icon svg,
aside.sidebar > .content label[selected] > .icon svg *,
aside.sidebar > .content label:hover > .icon svg,
aside.sidebar > .content label:hover > .icon svg * {
  fill: transparent;
  stroke: var(--sidebar-fg);
}
aside.sidebar > .content label > .text {
  width: calc(100% - 1.25rem - 0.5rem);
}
aside.sidebar > .content hr {
  background: var(--sidebar-fg-hr);
  margin: 0.5rem 0;
}
aside.sidebar > .content h2 {
  font-size: 1rem;
  font-weight: 700;
  color: var(--sidebar-fg-label);
  padding: 0.5rem 0.5rem;
}
@media (max-width: 900px) {
  aside.sidebar {
    left: calc(max(16rem, calc(12.5vw - 2rem)) * -1);
  }
  aside.sidebar.open {
    left: 1rem;
  }
  aside.sidebar.hide {
    left: calc(max(16rem, calc(12.5vw - 2rem)) * -1);
  }
  aside.sidebar > button {
    right: -1.9rem;
  }
}
@media (max-width: 600px) {
  aside.sidebar > button {
    right: -1.9rem;
  }
}

noscript {
  position: fixed;
  display: block;
  width: 100%;
  height: 100vh;
  background: var(--bg);
  z-index: 90000000;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
noscript p {
  line-height: 150%;
  font-size: 1.25rem;
}
noscript p a {
  text-decoration: underline;
}
noscript .logo {
  height: 2rem;
  width: 5rem;
  display: flex;
  justify-content: center;
  margin-bottom: 1rem;
}
noscript .logo .title {
  margin-left: 0.25rem;
}
noscript .logo svg {
  height: 100%;
}
noscript .logo > .icon,
noscript .logo > .text {
  height: 2rem;
}
noscript .logo svg {
  height: 100%;
}
